{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}

{{ reserveImport "github.com/web-ridge/utils-go/boilergql" }}
{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}


{{ reserveImport "github.com/ericlagergren/decimal" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/boil" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/queries" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/queries/qm" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/queries/qmhelper" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/types" }}
{{ reserveImport "github.com/volatiletech/null/v8" }}

{{ reserveImport "database/sql" }}
{{ reserveImport  $.Backend.Directory }}
{{ reserveImport  $.Frontend.Directory }}


{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}
	{{- if .IsInput }}
				
		func {{ .PluralName }}ToBoiler(am []*{{ $.Frontend.PackageName }}.{{ .Name }})( []*models.{{ .BoilerModel.Name }}) {
			ar := make([]*models.{{ .BoilerModel.Name }}, len(am))
			for i,m := range am {
				ar[i] = {{ .Name }}ToBoiler(
					m,
				)
			}
			return ar
		}
		
		func {{ .Name }}ToBoiler(
				m *{{ $.Frontend.PackageName }}.{{ .Name }},
			)( *models.{{ .BoilerModel.Name }}) {
			if m == nil {
				return nil
			}

			r := &models.{{ .BoilerModel.Name }}{
			{{ range $field := .Fields -}}
				{{- if $field.ConvertConfig.IsCustom -}}
					{{- if $field.IsPrimaryNumberID -}}
						{{- $field.BoilerField.Name }} : {{ $field.ConvertConfig.ToBoiler }},
					{{- else if and $field.IsNumberID $field.BoilerField.IsRelation -}}
						{{- $field.BoilerField.Name }} : {{ $field.ConvertConfig.ToBoiler }},
					{{- else if $field.IsRelation -}}
					{{- else -}}
						{{- $field.BoilerField.Name }} : {{ $field.ConvertConfig.ToBoiler }}(m.{{ $field.Name }}),
					{{- end }}
				{{- else if $field.IsRelation -}}
				{{- else -}}
					{{- $field.BoilerField.Name }}: m.{{ $field.Name }},
				{{- end }}
			{{ end }}
			}
			return r
		}

		func {{ .Name }}ToModelM(
			input map[string]interface{},
			m {{ $.Frontend.PackageName }}.{{ .Name }},
		) models.M {
			modelM := models.M{}
			for key := range input {
				switch key {
					{{ range $field := .Fields -}}
					case "{{ $field.JSONName }}":
						{{- if $field.ConvertConfig.IsCustom }}
							{{- if $field.IsPrimaryNumberID }}
								modelM[models.{{ $model.BoilerModel.Name }}Columns.{{- $field.BoilerField.Name }}] = {{ $field.ConvertConfig.ToBoiler }}
							{{- else if and $field.IsNumberID $field.BoilerField.IsRelation }}
								modelM[models.{{ $model.BoilerModel.Name }}Columns.{{- $field.BoilerField.Name }}] = {{ $field.ConvertConfig.ToBoiler }}
							{{- else if $field.IsRelation -}}
							{{- else }}
								modelM[models.{{ $model.BoilerModel.Name }}Columns.{{- $field.BoilerField.Name }}] = {{ $field.ConvertConfig.ToBoiler }}(m.{{ $field.Name }})
							{{- end }}
						{{- else if $field.IsRelation -}}
						{{- else }}
							modelM[models.{{ $model.BoilerModel.Name }}Columns.{{- $field.BoilerField.Name }}] = m.{{ $field.Name }}
						{{- end }}
					{{ end -}}
				}
			}
			return modelM
		}
		
		func {{ .Name }}ToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
			columnsWhichAreSet := []string{}
			for key := range input {
				switch key {
					{{ range $field := .Fields -}}
						case "{{ $field.JSONName }}":
							columnsWhichAreSet = append(columnsWhichAreSet, models.{{ $model.BoilerModel.Name }}Columns.{{- $field.BoilerField.Name }})
					{{ end -}}
				}
			}
			columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
			return boil.Whitelist(columnsWhichAreSet...)
		}
	{{- end }}
{{- end }}
