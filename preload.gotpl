{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}

{{ reserveImport "github.com/web-ridge/utils-go/boilergql/v3" }}
{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{ reserveImport "github.com/ericlagergren/decimal" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/boil" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/queries" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/queries/qm" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/queries/qmhelper" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/v4/types" }}
{{ reserveImport "github.com/volatiletech/null/v8" }}

{{ reserveImport "database/sql" }}
{{ reserveImport  $.Backend.Directory }}
{{ reserveImport  $.Frontend.Directory }}


var TablePreloadMap = map[string]map[string]boilergql.ColumnSetting{
	{{ range $model := .Models -}}
	{{ if $model.IsPreloadable -}}
		{{ $.Backend.PackageName }}.TableNames.{{- $model.BoilerModel.TableName }}: {
			{{- range $value := $model.PreloadArray }}
				 "{{$value.Key}}": {
					 Name: {{$value.ColumnSetting.Name}},
					 RelationshipModelName: {{ $.Backend.PackageName }}.TableNames.{{$value.ColumnSetting.RelationshipModelName}},
					 IDAvailable: {{$value.ColumnSetting.IDAvailable}},
				},
			{{- end }}
		},
	{{ end -}}
	{{ end -}}
}

{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}

	{{ if $model.IsPreloadable -}}
	func Get{{ .Name }}PreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
		return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, {{ $.Backend.PackageName }}.TableNames.{{ $model.BoilerModel.TableName }}, "")
	}

	func Get{{ .Name }}PreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
		return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, {{ $.Backend.PackageName }}.TableNames.{{ $model.BoilerModel.TableName }}, level)
	}
	{{ end -}}
{{- end }}

var MutationPreloadLevels = struct {
	EdgeNode string
}{
	EdgeNode: "edge.node",
}

